{"version":3,"file":"static/js/725.88dc75fc.chunk.js","mappings":"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","sources":["components/Auth/AuthNavigate/AuthNavigate.styled.js","components/Auth/AuthNavigate/AuthNavigate.jsx","components/Auth/RegisterForm/RegisterForm.styled.js","components/Auth/RegisterForm/RegisterSuccessModal/RegisterSuccessModal.styled.js","components/Auth/RegisterForm/RegisterSuccessModal/RegisterSuccessModal.jsx","components/Auth/RegisterForm/RegisterForm.jsx","pages/Register/RegisterPage.jsx","pages/Register/RegisterPage.styled.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const AuthLink = styled(Link)`\n  font-style: normal;\n  font-weight: 600;\n  font-size: 12px;\n  line-height: 14px;\n  border-bottom: 1px solid var(--color-button-period-type);\n  text-decoration: none;\n  color: var(--accent-background-color);\n  text-shadow: var(--logo-txt-shadow);\n  &:hover,\n  :focus {\n    color: var(--accent-background-color);\n    border-color: var(--accent-background-color);\n    transform: scale(1.1);\n  }\n\n  @media (min-width: 768px) {\n    font-size: 18px;\n    line-height: 24px;\n  }\n\n  @media (max-width: 375px) {\n    width: fit-content;\n    text-align: center;\n  }\n`;\n","import { AuthLink } from './AuthNavigate.styled';\n\nexport const AuthNavigate = ({ route, content }) => (\n  <AuthLink to={route}>\n    <span>{content}</span>\n  </AuthLink>\n);\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  position: relative;\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: var(--auth-bg-color);\n`;\n\nexport const StyleFormContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  @media (max-width: 375px) {\n    width: 100%;\n  }\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  padding: 40px 24px;\n  width: 335px;\n  margin-bottom: 18px;\n  background-color: var(--primary-background-color);\n  border-radius: 8px;\n  @media (min-width: 768px) {\n    width: 480px;\n    padding: 40px;\n    margin-bottom: 24px;\n  }\n  @media (max-width: 375px) {\n    width: 100%;\n  }\n`;\n\nexport const StyleFormTitle = styled.h1`\n  font-style: normal;\n  font-weight: 600;\n  font-size: 1.125rem;\n  line-height: 1.5rem;\n  color: var(--accent-background-color);\n  text-shadow: var(--logo-txt-shadow);\n  margin-bottom: 22px;\n`;\n\nexport const StyleLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 0.5rem;\n  font-style: normal;\n  font-weight: 600;\n  font-size: 12px;\n  line-height: 15px;\n  color: var(--secondary-text-color);\n`;\n\nexport const StyleInput = styled.input`\n  background-color: var(--primary-background-color);\n  outline: none;\n  border: var(--border-auth);\n  border-radius: 8px;\n  padding: 0.875rem;\n  width: 100%;\n  color: var(--calendar-digit-color);\n  &::placeholder {\n    font-style: normal;\n    font-weight: 400;\n    font-size: 16px;\n    line-height: 18px;\n    color: var(--auth-placeholder-color);\n  }\n`;\n\nexport const StyleParaghraph = styled.p`\n  font-style: normal;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 17px;\n  margin-top: 24px;\n  margin-bottom: 8px;\n  color: var(--primary-text-color);\n  @media (min-width: 768px) {\n    margin-top: 18px;\n  }\n`;\nexport const StyleButton = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 46px;\n  column-gap: 0.8125rem;\n  padding: 14px;\n  margin-top: 30px;\n  background: var(--accent-background-color);\n  box-shadow: var(--shadow-logout-btn);\n  border-radius: 16px;\n  border: none;\n  cursor: pointer;\n  transition: all var(--animation);\n  &:hover,\n  :focus {\n    transform: scale(1.02);\n    background: var(--hover-btn-background-color);\n  }\n  @media (min-width: 768px) {\n    width: 400px;\n    height: 56px;\n  }\n  @media (max-width: 375px) {\n    width: 100%;\n    padding: 16px;\n    margin-bottom: 12px;\n  }\n`;\n\nexport const ButtonText = styled.span`\n  display: flex;\n  flex-wrap: nowrap;\n  font-style: normal;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 18px;\n  letter-spacing: -0.02em;\n  color: var(--btn-text-color);\n  @media (min-width: 768px) {\n    font-size: 18px;\n    line-height: 24px;\n  }\n`;\n\nexport const Svg = styled.svg`\n  align-self: center;\n  width: 18px;\n  height: 18px;\n  fill: transparent;\n  stroke: var(--btn-text-color);\n  @media (min-width: 768px) {\n    width: 20px;\n    height: 20px;\n    margin-left: 13px;\n  }\n`;\n\nexport const ErrorMessage = styled.span`\n  font-style: normal;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 17px;\n  color: var(--text-error-color);\n`;\n\nexport const RegisterGooseImage = styled.img`\n  display: none;\n  @media (min-width: 1350px) {\n    position: fixed;\n    width: 400px;\n    height: 416px;\n    left: 50px;\n    bottom: 0;\n    display: block;\n  }\n`;\n\nexport const LoginGooseImage = styled.img`\n  display: none;\n  @media (min-width: 1350px) {\n    position: fixed;\n    width: 368px;\n    height: 521px;\n    right: 60px;\n    bottom: 19px;\n    display: block;\n  }\n`;\nexport const BtnGoogle = styled.a`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 46px;\n  font-size: 14px;\n  column-gap: 0.8125rem;\n  padding: 14px;\n  margin-top: 14px;\n  border: 1px solid var(--accent-background-color);\n  box-shadow: var(--shadow-logout-btn);\n  border-radius: 16px;\n  cursor: pointer;\n  transition: all var(--animation);\n  &:hover,\n  :focus {\n    transform: scale(1.02);\n    background: var(--hover-btn-background-color);\n  }\n  @media (min-width: 768px) {\n    width: 400px;\n    height: 56px;\n    font-size: 16px;\n  }\n  @media (max-width: 375px) {\n    width: 100%;\n    padding: 16px;\n    margin-bottom: 12px;\n    font-size: 12px;\n  }\n`;\n\nexport const GoogleIcon = styled.svg`\n  fill: none;\n  stroke: var(--accent-background-color);\n  width: 24px;\n  margin-right: 6px;\n  transition: all var(--animation);\n`;\n\nexport const Or = styled.p`\n  align-self: center;\n  font-style: normal;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 17px;\n  /* margin-top: 24px; */\n  /* margin-bottom: 8px; */\n  color: var(--primary-text-color);\n  @media (min-width: 768px) {\n    margin-top: 18px;\n  }\n`;\n","import styled from 'styled-components';\nimport { ModalStyled as BaseModalStyled } from 'components/Modal/Modal.styled';\nimport { StyleButton as BaseButton} from '../RegisterForm.styled';\n\nexport const ResendModalOverlay = styled.div`\n    display: flex;\n  justify-content: center;\n  align-items: center;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: var(--ovarlay-background-color);\n  z-index: 1200;\n\n`\n\nexport const ResendEmailWrapper = styled(BaseModalStyled)`\n  width: 500px; \n  height: 700px;\n  max-width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  gap: 30px;\n\n  @media screen and (min-width: 768px) {\n    width: 600px; \n  }\n\n  box-shadow: none;\n  text-align: center;\n`;\n\nexport const Title = styled.h2`\n    font-size: 24px;\n    font-weight: 700;\n`;\n\nexport const Text = styled.p`\n    font-size: 18px\n`;\n\nexport const ResendButton = styled(BaseButton)`   \n    width: 90%;\n    font-weight: 600;\n    font-size: 14px;\n    line-height: 18px;\n    letter-spacing: -0.02em;\n    color: var(--btn-text-color);\n    @media (min-width: 768px) {\n        font-size: 18px;\n        line-height: 24px;\n  }\n\n`","import React, { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { CloseIcon } from 'components/Modal/Modal.styled';\nimport Icons from 'images/sprite.svg';\nimport { ResendModalOverlay, ResendEmailWrapper, Title, Text, ResendButton } from './RegisterSuccessModal.styled';\n\nconst modalRoot = document.getElementById('modal-root');\n\nconst RegistrationModal = ({ children, onCloseModal}) => {\n  useEffect(() => {\n    document.body.style.overflow = 'hidden';\n\n    const onKeyDown = e => {\n      if (e.code === 'Escape') {\n        onCloseModal();\n      }\n    };\n\n    window.addEventListener('keydown', onKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', onKeyDown);\n      document.body.style.overflow = 'auto';\n    };\n  }, [onCloseModal]);\n\n  const handleOverlayClick = ({ currentTarget, target }) => {\n    if (currentTarget !== target) {\n      return;\n    }\n    onCloseModal();\n  };\n\n  return createPortal(\n    <ResendModalOverlay\n      onClick={handleOverlayClick}\n    >\n      <ResendEmailWrapper>\n        <CloseIcon onClick={() => onCloseModal()}>\n          <use href={`${Icons}#icon-close`}></use>\n        </CloseIcon>\n        {children}\n      </ResendEmailWrapper>\n    </ResendModalOverlay>,\n    modalRoot\n  );\n};\n\nconst RegistrationSuccessModal = ({ onResendEmail, onCloseModal, email }) => {\n  return (\n    <RegistrationModal onCloseModal={onCloseModal}>\n      <Title>Registration Successful</Title>\n      <Text>You are successfully registered! Verification sent to your e-mail</Text>\n      <ResendButton onClick={() => onResendEmail(email)}>Resend Email</ResendButton>\n    </RegistrationModal>\n  );\n};\n\nexport default RegistrationSuccessModal;","import { useDispatch } from 'react-redux';\n// import { useEffect } from 'react';\nimport { useState, useEffect } from 'react';\nimport { register, resendEmail } from 'redux/auth/operations';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport { useTranslation } from 'react-i18next';\nimport { registerLocale } from 'react-datepicker';\nimport { enGB, uk } from 'date-fns/locale';\n\n// import { setAuthHeader } from '../../../redux/auth/operations';\n// import { refreshUser } from '../../../redux/auth/operations';\n// import { selectToken } from '../../../redux/auth/selectors';\nimport { AuthNavigate } from 'components/Auth/AuthNavigate/AuthNavigate';\nimport RegistrationSuccessModal from './RegisterSuccessModal/RegisterSuccessModal';\n\nimport {\n  Wrapper,\n  StyleButton,\n  StyleFormContainer,\n  StyleFormTitle,\n  Form,\n  StyleInput,\n  StyleLabel,\n  StyleParaghraph,\n  ErrorMessage,\n  ButtonText,\n  Svg,\n  RegisterGooseImage,\n  BtnGoogle,\n  GoogleIcon,\n  Or,\n} from './RegisterForm.styled';\nimport gooseRegister2x from 'images/goose-register@2x.png';\nimport gooseRegister from 'images/goose-register.png';\nimport Icons from 'images/sprite.svg';\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  const emailId = nanoid();\n  const passwordId = nanoid();\n  const nameId = nanoid();\n  const [isOpened, setIsModalOpen] = useState(false);\n  const [userEmail, setUserEmail] = useState('');\n\n  const { i18n } = useTranslation();\n\n  registerLocale('enGB', enGB);\n  registerLocale('uk', uk);\n\n  const [language, setLanguage] = useState('');\n\n  useEffect(() => {\n    if (i18n.language === 'ua') {\n      setLanguage('uk');\n    } else {\n      setLanguage('enGB');\n    }\n  }, [i18n.language]);\n\n  const validationSchema = yup.object().shape({\n    name: yup\n      .string()\n      .min(3)\n      .max(\n        30,\n        language === 'enGB'\n          ? 'Name must be at most 30 characters'\n          : \"Ім'я має містити не більше 30 символів\"\n      )\n      .required(\n        language === 'enGB'\n          ? 'Please enter your name'\n          : \"Будь ласка, введіть своє ім'я\"\n      ),\n    email: yup\n      .string()\n      .email(\n        language === 'enGB'\n          ? 'Email must be valid email'\n          : 'Електронна адреса має бути дійсною'\n      )\n      .required(\n        language === 'enGB'\n          ? 'Email is a required field'\n          : 'Поле електронної пошти є обов’язковим для заповнення'\n      ),\n    password: yup\n      .string()\n      .min(\n        8,\n        language === 'enGB'\n          ? 'Password must be at least 8 characters'\n          : 'Пароль має бути не менше 8 символів'\n      )\n      .max(\n        16,\n        language === 'enGB'\n          ? 'Password must be at most 16 characters'\n          : 'Пароль має містити не більше 16 символів'\n      )\n      .required(\n        language === 'enGB'\n          ? 'Password is a required field'\n          : \"Пароль є обов'язковим полем\"\n      ),\n  });\n\n  const handleToggleModal = () => setIsModalOpen(!isOpened);\n\n  const handleResendEmail = async () => {\n    try {\n      await dispatch(resendEmail(userEmail));\n    } catch (error) {\n      console.error('Failed to resend email:', error.message);\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        email: '',\n        password: '',\n      }}\n      onSubmit={(values, { resetForm }) => {\n        setUserEmail(values.email);\n        dispatch(\n          register({\n            name: values.name,\n            email: values.email,\n            password: values.password,\n          })\n        ).then(() => {\n          resetForm();\n          setIsModalOpen(true);\n        });\n      }}\n      validationSchema={validationSchema}\n    >\n      {({\n        errors,\n        touched,\n        values,\n        handleSubmit,\n        handleBlur,\n        handleChange,\n        isSubmitting,\n      }) => (\n        <Wrapper>\n          <StyleFormContainer>\n            <Form autoComplete=\"off\" onSubmit={handleSubmit}>\n              <StyleFormTitle>\n                {i18n.language === 'en' ? 'Sign Up' : 'Зареєстрація'}\n              </StyleFormTitle>\n              <StyleLabel htmlFor={nameId}>\n                <StyleParaghraph>\n                  {i18n.language === 'en' ? 'Name' : \"Ім'я\"}\n                </StyleParaghraph>\n                <StyleInput\n                  type=\"text\"\n                  name=\"name\"\n                  id={nameId}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.name}\n                  placeholder={\n                    i18n.language === 'en'\n                      ? 'Enter your name'\n                      : \"Ведіть своє ім'я\"\n                  }\n                />\n              </StyleLabel>\n              <ErrorMessage>\n                {errors.name && touched.name && errors.name}\n              </ErrorMessage>\n              <StyleLabel htmlFor={emailId}>\n                <StyleParaghraph>\n                  {i18n.language === 'en' ? 'Email' : 'Електронна адреса'}\n                </StyleParaghraph>\n                <StyleInput\n                  type=\"email\"\n                  name=\"email\"\n                  id={emailId}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.email}\n                  placeholder={\n                    i18n.language === 'en'\n                      ? 'Enter email'\n                      : 'Введіть електронну адресу'\n                  }\n                />\n              </StyleLabel>\n              <ErrorMessage>\n                {errors.email && touched.email && errors.email}\n              </ErrorMessage>\n              <StyleLabel htmlFor={passwordId}>\n                <StyleParaghraph>\n                  {i18n.language === 'en' ? 'Password' : 'Пароль'}\n                </StyleParaghraph>\n                <StyleInput\n                  type=\"password\"\n                  name=\"password\"\n                  id={passwordId}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.password}\n                  placeholder={\n                    i18n.language === 'en' ? 'Enter password' : 'Введіть пароль'\n                  }\n                />\n              </StyleLabel>\n              <ErrorMessage>\n                {errors.password && touched.password && errors.password}\n              </ErrorMessage>\n              <StyleButton type=\"submit\" disabled={isSubmitting}>\n                <ButtonText>\n                  {i18n.language === 'en' ? 'Sign Up' : 'Зареєструватися'}\n                  <Svg>\n                    <use href={`${Icons}#login-door-sf`}></use>\n                  </Svg>\n                </ButtonText>\n              </StyleButton>\n              <Or>{i18n.language === 'en' ? 'or' : 'або'}</Or>\n              <BtnGoogle href=\"https://goosetrack-backend.onrender.com/api/auth/google\">\n                <GoogleIcon>\n                  <use href={`${Icons}#icon-google`}></use>\n                </GoogleIcon>\n                {i18n.language === 'en'\n                  ? 'Sign Up with Google'\n                  : 'Зареєструйтеся через Google'}\n              </BtnGoogle>\n            </Form>\n            <AuthNavigate\n              route=\"/login\"\n              content={i18n.language === 'en' ? 'Log In' : 'Увійти'}\n            />\n            <RegisterGooseImage\n              srcSet={`${gooseRegister} 1x, ${gooseRegister2x} 2x`}\n              src={gooseRegister2x}\n              alt=\"goose\"\n            />\n          </StyleFormContainer>\n          {isOpened && (\n            <RegistrationSuccessModal\n              onCloseModal={handleToggleModal}\n              onResendEmail={() => handleResendEmail(values.email)}\n              email={values.email}\n            />\n          )}\n        </Wrapper>\n      )}\n    </Formik>\n  );\n};\n","import { RegisterForm } from '../../components/Auth/RegisterForm/RegisterForm';\nimport { AuthNavigate } from '../../components/Auth/AuthNavigate/AuthNavigate';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n  Container,\n  CloudButton,\n  ButtonText,\n} from '../Register/RegisterPage.styled';\n\nconst RegisterPage = () => {\n  const { i18n } = useTranslation();\n\n  return (\n    <Container>\n      <CloudButton to=\"/\">\n        <ButtonText>\n          {i18n.language === 'en' ? 'Home' : 'На головну'}\n        </ButtonText>\n      </CloudButton>\n      <RegisterForm />\n      <AuthNavigate route={'/login'} pageName={'Log In'} />\n    </Container>\n  );\n};\n\nexport default RegisterPage;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nconst media = {\n  tablet: '@media screen and (min-width: 768px)',\n  desktop: '@media screen and (min-width: 1440px)',\n  mobile: '@media screen and (max-width: 767px)',\n};\n\nexport const Container = styled.div`\n  min-height: 100vh;\n  background: var(--auth-bg-color);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: flex-start;\n  padding-top: 20px;\n  padding-bottom: 20px;\n\n  @media (max-width: 375px) {\n    width: 100%;\n    padding-left: 20px;\n    padding-right: 20px;\n  }\n`;\n\nexport const CloudButton = styled(Link)`\n  ${media.tablet} {\n  display: flex;\n  position: fixed;\n  top: 25px;\n  left: 80px;\n  width: 5em;\n  height: 5em;\n  color: var(--cloud-text-color);\n  text-align: center;\n  justify-content: center;\n  align-items: center;\n  background: #ffffff;\n  border-width: 0.25em;\n  border-style: solid;\n  border-color: var(--border-cloud-color);\n  border-radius: 50% 50% 0 0;\n  z-index: 9999;\n\n  &:after,\n  &:before {\n    content: '';\n    position: absolute;\n    bottom: -0.25em;\n    background: inherit;\n    border-width: 0.25em;\n    border-style: solid;\n    border-color: var(--border-cloud-color);\n  }\n\n  &:after {\n    right: 80%;\n    width: 80%;\n    height: 80%;\n    border-right: none;\n    border-radius: 50% 50% 0;\n  }\n\n  &:before {\n    left: 80%;\n    width: 60%;\n    height: 60%;\n    border-left: none;\n    border-radius: 50% 50% 50% 0;\n  }\n\n  &:hover {\n    background-color: #abcdef;\n    color: #ffffff;\n  }  \n}\n}`;\n\nexport const ButtonText = styled.span`\n  ${media.tablet} {\n    display: inline-block;\n    line-height: 1;\n    z-index: 5;\n    padding-top: 25px;\n    font-weight: 900;\n  }\n\n  ${media.mobile} {\n    margin-left: 30px;\n    font-style: normal;\n    font-weight: 600;\n    font-size: 16px;\n    line-height: 20px;\n    border-bottom: 1px solid var(--color-button-period-type);\n    text-decoration: none;\n    color: var(--accent-background-color);\n    text-shadow: var(--logo-txt-shadow);\n\n    &:hover,\n    :focus {\n      color: var(--accent-background-color);\n      border-color: var(--accent-background-color);\n      transform: scale(1.1);\n    }\n  }\n\n    @media (max-width: 375px) {\n      margin: 0;\n    }\n  }\n`;\n"],"names":["AuthLink","styled","Link","AuthNavigate","route","content","to","Wrapper","StyleFormContainer","Form","StyleFormTitle","StyleLabel","StyleInput","StyleParaghraph","StyleButton","ButtonText","Svg","ErrorMessage","RegisterGooseImage","LoginGooseImage","BtnGoogle","GoogleIcon","Or","ResendModalOverlay","ResendEmailWrapper","BaseModalStyled","Title","Text","ResendButton","BaseButton","modalRoot","document","getElementById","RegistrationModal","children","onCloseModal","useEffect","body","style","overflow","onKeyDown","e","code","window","addEventListener","removeEventListener","createPortal","onClick","currentTarget","target","href","Icons","onResendEmail","email","RegisterForm","dispatch","useDispatch","emailId","nanoid","passwordId","nameId","useState","isOpened","setIsModalOpen","userEmail","setUserEmail","i18n","useTranslation","registerLocale","enGB","uk","language","setLanguage","validationSchema","yup","shape","name","min","max","required","password","handleToggleModal","handleResendEmail","resendEmail","console","error","message","initialValues","onSubmit","values","resetForm","register","then","errors","touched","handleSubmit","handleBlur","handleChange","isSubmitting","autoComplete","htmlFor","type","id","onChange","onBlur","value","placeholder","disabled","srcSet","gooseRegister","gooseRegister2x","src","alt","pageName","media","Container","CloudButton"],"sourceRoot":""}