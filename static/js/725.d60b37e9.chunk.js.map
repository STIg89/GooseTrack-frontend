{"version":3,"file":"static/js/725.d60b37e9.chunk.js","mappings":"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","sources":["components/Auth/AuthNavigate/AuthNavigate.styled.js","components/Auth/AuthNavigate/AuthNavigate.jsx","components/Auth/RegisterForm/RegisterForm.styled.js","components/Auth/RegisterForm/RegisterSuccessModal/RegisterSuccessModal.styled.js","components/Auth/RegisterForm/RegisterSuccessModal/RegisterSuccessModal.jsx","components/Auth/RegisterForm/RegisterForm.jsx","pages/Register/RegisterPage.jsx","pages/Register/RegisterPage.styled.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const AuthLink = styled(Link)`\n  font-style: normal;\n  font-weight: 600;\n  font-size: 12px;\n  line-height: 14px;\n  border-bottom: 1px solid var(--color-button-period-type);\n  text-decoration: none;\n  color: var(--accent-background-color);\n  text-shadow: var(--logo-txt-shadow);\n  &:hover,\n  :focus {\n    color: var(--accent-background-color);\n    border-color: var(--accent-background-color);\n    transform: scale(1.1);\n  }\n\n  @media (min-width: 768px) {\n    font-size: 18px;\n    line-height: 24px;\n  }\n\n  @media (max-width: 375px) {\n    width: fit-content;\n    text-align: center;\n  }\n`;\n","import { AuthLink } from './AuthNavigate.styled';\n\nexport const AuthNavigate = ({ route, content }) => (\n  <AuthLink to={route}>\n    <span>{content}</span>\n  </AuthLink>\n);\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  position: relative;\n  height: 100vh;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: var(--auth-bg-color);\n`;\n\nexport const StyleFormContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  @media (max-width: 375px) {\n    width: 100%;\n  }\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  padding: 40px 24px;\n  width: 335px;\n  margin-bottom: 18px;\n  background-color: var(--primary-background-color);\n  border-radius: 8px;\n  @media (min-width: 768px) {\n    width: 480px;\n    padding: 40px;\n    margin-bottom: 24px;\n  }\n  @media (max-width: 375px) {\n    width: 100%;\n  }\n`;\n\nexport const StyleFormTitle = styled.h1`\n  font-style: normal;\n  font-weight: 600;\n  font-size: 1.125rem;\n  line-height: 1.5rem;\n  color: var(--accent-background-color);\n  text-shadow: var(--logo-txt-shadow);\n  margin-bottom: 22px;\n`;\n\nexport const StyleLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 0.5rem;\n  font-style: normal;\n  font-weight: 600;\n  font-size: 12px;\n  line-height: 15px;\n  color: var(--secondary-text-color);\n`;\n\nexport const StyleInput = styled.input`\n  background-color: var(--primary-background-color);\n  outline: none;\n  border: var(--border-auth);\n  border-radius: 8px;\n  padding: 0.875rem;\n  width: 100%;\n  color: var(--calendar-digit-color);\n  &::placeholder {\n    font-style: normal;\n    font-weight: 400;\n    font-size: 16px;\n    line-height: 18px;\n    color: var(--auth-placeholder-color);\n  }\n`;\n\nexport const StyleParaghraph = styled.p`\n  font-style: normal;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 17px;\n  margin-top: 24px;\n  margin-bottom: 8px;\n  color: var(--primary-text-color);\n  @media (min-width: 768px) {\n    margin-top: 18px;\n  }\n`;\nexport const StyleButton = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 46px;\n  column-gap: 0.8125rem;\n  padding: 14px;\n  margin-top: 30px;\n  background: var(--accent-background-color);\n  box-shadow: var(--shadow-logout-btn);\n  border-radius: 16px;\n  border: none;\n  cursor: pointer;\n  &:hover,\n  :focus {\n    transform: scale(1.02);\n    background: var(--hover-btn-background-color);\n  }\n  @media (min-width: 768px) {\n    width: 400px;\n    height: 56px;\n  }\n  @media (max-width: 375px) {\n    width: 100%;\n    padding: 16px;\n    margin-bottom: 12px;\n  }\n`;\n\nexport const ButtonText = styled.span`\n  display: flex;\n  flex-wrap: nowrap;\n  font-style: normal;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 18px;\n  letter-spacing: -0.02em;\n  color: var(--btn-text-color);\n  @media (min-width: 768px) {\n    font-size: 18px;\n    line-height: 24px;\n  }\n`;\n\nexport const Svg = styled.svg`\n  align-self: center;\n  width: 18px;\n  height: 18px;\n  fill: transparent;\n  stroke: var(--btn-text-color);\n  @media (min-width: 768px) {\n    width: 20px;\n    height: 20px;\n    margin-left: 13px;\n  }\n`;\n\nexport const ErrorMessage = styled.span`\n  font-style: normal;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 17px;\n  color: var(--text-error-color);\n`;\n\nexport const RegisterGooseImage = styled.img`\n  display: none;\n  @media (min-width: 1350px) {\n    position: fixed;\n    width: 400px;\n    height: 416px;\n    left: 50px;\n    bottom: 0;\n    display: block;\n  }\n`;\n\nexport const LoginGooseImage = styled.img`\n  display: none;\n  @media (min-width: 1350px) {\n    position: fixed;\n    width: 368px;\n    height: 521px;\n    right: 60px;\n    bottom: 19px;\n    display: block;\n  }\n`;\n","import styled from 'styled-components';\nimport { ModalStyled as BaseModalStyled } from 'components/Modal/Modal.styled';\nimport { StyleButton as BaseButton} from '../RegisterForm.styled';\n\nexport const ResendEmailWrapper = styled(BaseModalStyled)`\n  width: 400px; \n  height: 530px;\n  max-width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  gap: 30px;\n\n  @media screen and (min-width: 768px) {\n    width: 500px; \n  }\n\n  box-shadow: none;\n  text-align: center;\n`;\n\nexport const Title = styled.h2`\n    font-size: 24px;\n    font-weight: 700;\n`;\n\nexport const Text = styled.p`\n    font-size: 18px\n`;\n\nexport const ResendButton = styled(BaseButton)`   \n    width: 90%;\n    font-weight: 600;\n    font-size: 14px;\n    line-height: 18px;\n    letter-spacing: -0.02em;\n    color: var(--btn-text-color);\n    @media (min-width: 768px) {\n        font-size: 18px;\n        line-height: 24px;\n  }\n\n`","import React, { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { Overlay, CloseIcon } from 'components/Modal/Modal.styled';\nimport Icons from 'images/sprite.svg';\nimport { ResendEmailWrapper, Title, Text, ResendButton } from './RegisterSuccessModal.styled';\n\nconst modalRoot = document.getElementById('modal-root');\n\nconst RegistrationModal = ({ children, onCloseModal}) => {\n  useEffect(() => {\n    document.body.style.overflow = 'hidden';\n\n    const onKeyDown = e => {\n      if (e.code === 'Escape') {\n        onCloseModal();\n      }\n    };\n\n    window.addEventListener('keydown', onKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', onKeyDown);\n      document.body.style.overflow = 'auto';\n    };\n  }, [onCloseModal]);\n\n  const handleOverlayClick = ({ currentTarget, target }) => {\n    if (currentTarget !== target) {\n      return;\n    }\n    onCloseModal();\n  };\n\n  return createPortal(\n    <Overlay\n      onClick={handleOverlayClick}\n    >\n      <ResendEmailWrapper>\n        <CloseIcon onClick={() => onCloseModal()}>\n          <use href={`${Icons}#icon-close`}></use>\n        </CloseIcon>\n        {children}\n      </ResendEmailWrapper>\n    </Overlay>,\n    modalRoot\n  );\n};\n\nconst RegistrationSuccessModal = ({ onResendEmail, onCloseModal, email }) => {\n  return (\n    <RegistrationModal onCloseModal={onCloseModal}>\n      <Title>Registration Successful</Title>\n      <Text>You are successfully registered! Verification sent to your e-mail</Text>\n      <ResendButton onClick={() => onResendEmail(email)}>Resend Email</ResendButton>\n    </RegistrationModal>\n  );\n};\n\nexport default RegistrationSuccessModal;","import { useDispatch } from 'react-redux';\n// import { useEffect } from 'react';\nimport { useState } from 'react';\nimport { register, resendEmail } from 'redux/auth/operations';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { nanoid } from 'nanoid';\n\n// import { setAuthHeader } from '../../../redux/auth/operations';\n// import { refreshUser } from '../../../redux/auth/operations';\n// import { selectToken } from '../../../redux/auth/selectors';\nimport { AuthNavigate } from 'components/Auth/AuthNavigate/AuthNavigate';\nimport RegistrationSuccessModal from './RegisterSuccessModal/RegisterSuccessModal';\n\nimport {\n  Wrapper,\n  StyleButton,\n  StyleFormContainer,\n  StyleFormTitle,\n  Form,\n  StyleInput,\n  StyleLabel,\n  StyleParaghraph,\n  ErrorMessage,\n  ButtonText,\n  Svg,\n  RegisterGooseImage,\n} from './RegisterForm.styled';\nimport gooseRegister2x from 'images/goose-register@2x.png';\nimport gooseRegister from 'images/goose-register.png';\nimport Icons from 'images/sprite.svg';\n\nconst validationSchema = yup.object().shape({\n  name: yup\n    .string()\n    .min(3)\n    .max(30, 'Name must be at most 30 characters')\n    .required('Please enter your name'),\n  email: yup\n    .string()\n    .email('Email must be valid email')\n    .required('Email is a required field'),\n  password: yup\n    .string()\n    .min(8, 'Password must be at least 8 characters')\n    .max(16, 'Password must be at most 16 characters')\n    .required('Password is a required field'),\n});\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  const emailId = nanoid();\n  const passwordId = nanoid();\n  const nameId = nanoid();\n  const [isOpened, setIsModalOpen] = useState(false);\n  const [userEmail, setUserEmail] = useState('');\n\n  const handleToggleModal = () => setIsModalOpen(!isOpened);\n\n  const handleResendEmail = async () => {\n    try {\n      await dispatch(resendEmail(userEmail));\n    } catch (error) {\n      console.error('Failed to resend email:', error.message);\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        email: '',\n        password: '',\n      }}\n      onSubmit={(values, { resetForm }) => {\n        setUserEmail(values.email);\n        dispatch(\n          register({\n            name: values.name,\n            email: values.email,\n            password: values.password,\n          })\n        ).then(() => {\n          resetForm();\n          setIsModalOpen(true);\n        });\n      }}\n      validationSchema={validationSchema}\n    >\n      {({\n        errors,\n        touched,\n        values,\n        handleSubmit,\n        handleBlur,\n        handleChange,\n        isSubmitting,\n      }) => (\n        <Wrapper>\n          <StyleFormContainer>\n            <Form autoComplete=\"off\" onSubmit={handleSubmit}>\n              <StyleFormTitle>Sign Up</StyleFormTitle>\n              <StyleLabel htmlFor={nameId}>\n                <StyleParaghraph>Name</StyleParaghraph>\n                <StyleInput\n                  type=\"text\"\n                  name=\"name\"\n                  id={nameId}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.name}\n                  placeholder=\"Enter your name\"\n                />\n              </StyleLabel>\n              <ErrorMessage>\n                {errors.name && touched.name && errors.name}\n              </ErrorMessage>\n              <StyleLabel htmlFor={emailId}>\n                <StyleParaghraph>Email</StyleParaghraph>\n                <StyleInput\n                  type=\"email\"\n                  name=\"email\"\n                  id={emailId}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.email}\n                  placeholder=\"Enter email\"\n                />\n              </StyleLabel>\n              <ErrorMessage>\n                {errors.email && touched.email && errors.email}\n              </ErrorMessage>\n              <StyleLabel htmlFor={passwordId}>\n                <StyleParaghraph>Password</StyleParaghraph>\n                <StyleInput\n                  type=\"password\"\n                  name=\"password\"\n                  id={passwordId}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.password}\n                  placeholder=\"Enter password\"\n                />\n              </StyleLabel>\n              <ErrorMessage>\n                {errors.password && touched.password && errors.password}\n              </ErrorMessage>\n              <StyleButton type=\"submit\" disabled={isSubmitting}>\n                <ButtonText>\n                  Sign Up\n                  <Svg>\n                    <use href={`${Icons}#login-door-sf`}></use>\n                  </Svg>\n                </ButtonText>\n              </StyleButton>\n            </Form>\n            <AuthNavigate route=\"/login\" content=\"Log In\" />\n            <RegisterGooseImage\n              srcSet={`${gooseRegister} 1x, ${gooseRegister2x} 2x`}\n              src={gooseRegister2x}\n              alt=\"goose\"\n            />\n          </StyleFormContainer>\n          {isOpened && (\n            <RegistrationSuccessModal\n              onCloseModal={handleToggleModal}\n              onResendEmail={() => handleResendEmail(values.email)}\n              email={values.email}\n            />\n          )}\n        </Wrapper>\n      )}\n    </Formik>\n  );\n};\n","import { RegisterForm } from '../../components/Auth/RegisterForm/RegisterForm';\nimport { AuthNavigate } from '../../components/Auth/AuthNavigate/AuthNavigate';\nimport {\n  Container,\n  CloudButton,\n  ButtonText,\n} from '../Register/RegisterPage.styled';\n\nconst RegisterPage = () => {\n  return (\n    <Container>\n      <CloudButton to=\"/\">\n        <ButtonText>Home</ButtonText>\n      </CloudButton>\n      <RegisterForm />\n      <AuthNavigate route={'/login'} pageName={'Log In'} />\n    </Container>\n  );\n};\n\nexport default RegisterPage;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nconst media = {\n  tablet: '@media screen and (min-width: 768px)',\n  desktop: '@media screen and (min-width: 1440px)',\n  mobile: '@media screen and (max-width: 767px)',\n};\n\nexport const Container = styled.div`\n  min-height: 100vh;\n  background: var(--auth-bg-color);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: flex-start;\n  padding-top: 20px;\n  padding-bottom: 20px;\n\n  @media (max-width: 375px) {\n    width: 100%;\n    padding-left: 20px;\n    padding-right: 20px;\n  }\n`;\n\nexport const CloudButton = styled(Link)`\n  ${media.tablet} {\n  display: flex;\n  position: fixed;\n  top: 25px;\n  left: 80px;\n  width: 5em;\n  height: 5em;\n  color: var(--cloud-text-color);\n  text-align: center;\n  justify-content: center;\n  align-items: center;\n  background: #ffffff;\n  border-width: 0.25em;\n  border-style: solid;\n  border-color: var(--border-cloud-color);\n  border-radius: 50% 50% 0 0;\n  z-index: 9999;\n\n  &:after,\n  &:before {\n    content: '';\n    position: absolute;\n    bottom: -0.25em;\n    background: inherit;\n    border-width: 0.25em;\n    border-style: solid;\n    border-color: var(--border-cloud-color);\n  }\n\n  &:after {\n    right: 80%;\n    width: 80%;\n    height: 80%;\n    border-right: none;\n    border-radius: 50% 50% 0;\n  }\n\n  &:before {\n    left: 80%;\n    width: 60%;\n    height: 60%;\n    border-left: none;\n    border-radius: 50% 50% 50% 0;\n  }\n\n  &:hover {\n    background-color: #abcdef;\n    color: #ffffff;\n  }  \n}\n}`;\n\nexport const ButtonText = styled.span`\n  ${media.tablet} {\n    display: inline-block;\n    line-height: 1;\n    z-index: 5;\n    padding-top: 25px;\n    font-weight: 900;\n  }\n\n  ${media.mobile} {\n    margin-left: 30px;\n    font-style: normal;\n    font-weight: 600;\n    font-size: 16px;\n    line-height: 20px;\n    border-bottom: 1px solid var(--color-button-period-type);\n    text-decoration: none;\n    color: var(--accent-background-color);\n    text-shadow: var(--logo-txt-shadow);\n\n    &:hover,\n    :focus {\n      color: var(--accent-background-color);\n      border-color: var(--accent-background-color);\n      transform: scale(1.1);\n    }\n  }\n\n    @media (max-width: 375px) {\n      margin: 0;\n    }\n  }\n`;\n"],"names":["AuthLink","styled","Link","AuthNavigate","route","content","to","Wrapper","StyleFormContainer","Form","StyleFormTitle","StyleLabel","StyleInput","StyleParaghraph","StyleButton","ButtonText","Svg","ErrorMessage","RegisterGooseImage","LoginGooseImage","ResendEmailWrapper","BaseModalStyled","Title","Text","ResendButton","BaseButton","modalRoot","document","getElementById","RegistrationModal","children","onCloseModal","useEffect","body","style","overflow","onKeyDown","e","code","window","addEventListener","removeEventListener","createPortal","onClick","currentTarget","target","href","Icons","onResendEmail","email","validationSchema","yup","shape","name","min","max","required","password","RegisterForm","dispatch","useDispatch","emailId","nanoid","passwordId","nameId","useState","isOpened","setIsModalOpen","userEmail","setUserEmail","handleToggleModal","handleResendEmail","resendEmail","console","error","message","initialValues","onSubmit","values","resetForm","register","then","errors","touched","handleSubmit","handleBlur","handleChange","isSubmitting","autoComplete","htmlFor","type","id","onChange","onBlur","value","placeholder","disabled","srcSet","gooseRegister","gooseRegister2x","src","alt","pageName","media","Container","CloudButton"],"sourceRoot":""}