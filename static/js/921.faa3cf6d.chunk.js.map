{"version":3,"file":"static/js/921.faa3cf6d.chunk.js","mappings":"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","sources":["components/Calendar/CalendarToolbar/PeriodPaginator/PeriodPaginator.styled.jsx","components/Calendar/CalendarToolbar/PeriodPaginator/PeriodPaginator.jsx","components/Calendar/CalendarToolbar/PeriodTypeSelect/PeriodTypesSelect.styled.jsx","components/Calendar/CalendarToolbar/PeriodTypeSelect/PeriodTypeSelect.jsx","components/Calendar/CalendarToolbar/CalendarToolbar.jsx","pages/Calendar/CalendarPage.jsx","../node_modules/date-fns/esm/addMonths/index.js","../node_modules/date-fns/esm/subMonths/index.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const GroupPeriod = styled.div`\n  display: flex;\n  gap: 8px;\n  justify-content: space-between;\n  width: 100%;\n\n  @media screen and (min-width: 768px) {\n    width: 260px;\n    justify-content: space-between;\n  }\n`;\nexport const PeriodView = styled.div`\n  padding: 6px 12px;\n  border-radius: 8px;\n  font-weight: 700;\n  font-size: 14px;\n  line-height: 1.29;\n\n  text-align: center;\n  text-transform: uppercase;\n  background-color: var(--color-button-period-type);\n  color: var(--btn-text-color);\n  @media screen and (min-width: 768px) {\n    padding: 8px 12px;\n    font-size: 16px;\n    line-height: 1.12;\n  }\n`;\nexport const PeriodTabs = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 7px 10px;\n  border-top-left: 8px;\n  color: var(--calendar-digit-color);\n  border-bottom-left-radius: 8px;\n  border-top-left-radius: 8px;\n  cursor: pointer;\n  background-color: var(--primary-background-color);\n  border: 1px solid rgba(220, 227, 229, 0.5);\n  & > svg {\n    stroke: currentColor;\n    fill: transparent;\n  }\n`;\nexport const PeriodTabsContainer = styled.div`\n  display: flex;\n  border-radius: 8px;\n  overflow: hidden;\n`;\nexport const PeriodContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-wrap: wrap;\n  margin-bottom: 24px;\n  gap: 18px;\n  width: 100%;\n  @media screen and (min-width: 768px) {\n    width: 100%;\n    flex-wrap: no-wrap;\n    margin-bottom: 32px;\n  }\n`;\n","import React from 'react';\nimport sprite from 'images/sprite.svg';\nimport { addMonths, subMonths, format } from 'date-fns';\nimport {\n  PeriodView,\n  PeriodTabs,\n  PeriodTabsContainer,\n  GroupPeriod,\n} from './PeriodPaginator.styled';\n\nconst PeriodPaginator = ({ setCurrentDate, currentDate, selectedDate }) => {\n  const nextMonth = () => {\n    setCurrentDate(addMonths(currentDate, 1));\n  };\n  const prevMonth = () => {\n    setCurrentDate(subMonths(currentDate, 1));\n  };\n  const monthFormat = 'MMMM y';\n  const formattedMonth = format(currentDate, monthFormat);\n  return (\n    <GroupPeriod>\n      <PeriodView>{formattedMonth}</PeriodView>\n      <PeriodTabsContainer>\n        <PeriodTabs onClick={prevMonth}>\n          <svg width=\"16\" height=\"16\">\n            <use href={`${sprite}#calendar-right-sf`}></use>\n          </svg>\n        </PeriodTabs>\n        <PeriodTabs style={{ transform: 'rotate(180deg)' }} onClick={nextMonth}>\n          <svg width=\"16\" height=\"16\">\n            <use href={`${sprite}#calendar-right-sf`}></use>\n          </svg>\n        </PeriodTabs>\n      </PeriodTabsContainer>\n    </GroupPeriod>\n  );\n};\nexport default PeriodPaginator;\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const TypesTabsContainer = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n\n  border-radius: 8px;\n  overflow: hidden;\n`;\nexport const TypesTabs = styled(NavLink)`\n  color: var(--color-button-period-type);\n  padding: 8px 16px;\n  background-color: var(--button-period-type);\n  min-width: 76px;\n  font-style: normal;\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 1.29;\n\n  text-align: center;\n  &:hover,\n  &:focus,\n  &:active,\n  &.active {\n    background-color: var(--active-button-period-type);\n  }\n  @media screen and (min-width: 768px) {\n    font-size: 16px;\n    line-height: 1.12;\n  }\n`;\nexport const TabsFlex = styled.div`\n  width: 100%;\n\n  display: flex;\n  justify-content: flex-start;\n  @media screen and (min-width: 768px) {\n    width: auto;\n  }\n`;\n","import React from 'react';\nimport {\n  TypesTabs,\n  TypesTabsContainer,\n  TabsFlex,\n} from '../PeriodTypeSelect/PeriodTypesSelect.styled';\nimport { parseDate } from 'helpers/parseDate';\n\nconst PeriodTypeSelect = ({ selectedDate }) => {\n  const parsedDate = parseDate(selectedDate);\n  return (\n    <TabsFlex>\n      <TypesTabsContainer>\n        <TypesTabs to=\"/calendar\" end>\n          Month\n        </TypesTabs>\n        <TypesTabs to={`day/${parsedDate}`}>Day</TypesTabs>\n      </TypesTabsContainer>\n    </TabsFlex>\n  );\n};\nexport default PeriodTypeSelect;\n","import React from 'react';\nimport { addMonths, subMonths } from 'date-fns';\nimport PeriodPaginator from 'components/Calendar/CalendarToolbar/PeriodPaginator/PeriodPaginator';\nimport { PeriodContainer } from 'components/Calendar/CalendarToolbar/PeriodPaginator/PeriodPaginator.styled';\nimport PeriodTypeSelect from 'components/Calendar/CalendarToolbar/PeriodTypeSelect/PeriodTypeSelect';\n\nconst CalendarToolbar = ({ setCurrentDate, currentDate, selectedDate }) => {\n  const nextMonth = () => {\n    setCurrentDate(addMonths(currentDate, 1));\n  };\n  const prevMonth = () => {\n    setCurrentDate(subMonths(currentDate, 1));\n  };\n\n  return (\n    <>\n      <PeriodContainer>\n        <PeriodPaginator\n          nextMonth={nextMonth}\n          prevMonth={prevMonth}\n          currentDate={currentDate}\n          setCurrentDate={setCurrentDate}\n          selectedDate={selectedDate}\n        />\n        <PeriodTypeSelect selectedDate={selectedDate} />\n      </PeriodContainer>\n    </>\n  );\n};\nexport default CalendarToolbar;\n","import { Outlet } from 'react-router';\nimport { useParams } from 'react-router-dom';\nimport { useState } from 'react';\n\nimport CalendarToolbar from 'components/Calendar/CalendarToolbar/CalendarToolbar';\nimport ChoosedMonth from 'components/Calendar/ChoosedMonth/ChoosedMonth';\n\nconst CalendarPage = () => {\n  const params = useParams();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  return (\n    <div>\n      <CalendarToolbar\n        setCurrentDate={setCurrentDate}\n        currentDate={currentDate}\n        selectedDate={selectedDate}\n      />\n      {!params?.currentDay && (\n        <ChoosedMonth\n          setCurrentDate={setCurrentDate}\n          currentDate={currentDate}\n          selectedDate={selectedDate}\n          setSelectedDate={setSelectedDate}\n        />\n      )}\n      <Outlet />\n    </div>\n  );\n};\n\nexport default CalendarPage;\n","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n  var dayOfMonth = date.getDate();\n\n  // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMonths\n * @category Month Helpers\n * @summary Subtract the specified number of months from the given date.\n *\n * @description\n * Subtract the specified number of months from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 months from 1 February 2015:\n * const result = subMonths(new Date(2015, 1, 1), 5)\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport default function subMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, -amount);\n}"],"names":["GroupPeriod","styled","PeriodView","PeriodTabs","PeriodTabsContainer","PeriodContainer","setCurrentDate","currentDate","formattedMonth","selectedDate","format","onClick","subMonths","width","height","href","sprite","style","transform","addMonths","TypesTabsContainer","TypesTabs","NavLink","TabsFlex","parsedDate","parseDate","to","end","nextMonth","prevMonth","params","useParams","useState","Date","setSelectedDate","currentDay","ChoosedMonth","Outlet","dirtyDate","dirtyAmount","requiredArgs","arguments","date","toDate","amount","toInteger","isNaN","NaN","dayOfMonth","getDate","endOfDesiredMonth","getTime","setMonth","getMonth","daysInMonth","setFullYear","getFullYear"],"sourceRoot":""}